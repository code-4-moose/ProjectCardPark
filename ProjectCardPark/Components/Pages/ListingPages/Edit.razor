@page "/listings/edit"
@using Microsoft.EntityFrameworkCore
@using ProjectKard.Domain
@inject IDbContextFactory<ProjectCardPark.Data.ProjectCardParkContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Listing</h2>
<hr />
@if (Listing is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Listing" OnValidSubmit="UpdateListing" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Listing.Id" value="@Listing.Id" />
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Listing.Price" class="form-control" />
                    <ValidationMessage For="() => Listing.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="Listing.Amount" class="form-control" />
                    <ValidationMessage For="() => Listing.Amount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputText id="userid" @bind-Value="Listing.UserId" class="form-control" />
                    <ValidationMessage For="() => Listing.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cardid" class="form-label">CardId:</label>
                    <InputText id="cardid" @bind-Value="Listing.CardId" class="form-control" />
                    <ValidationMessage For="() => Listing.CardId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categoryid" class="form-label">CategoryId:</label>
                    <InputText id="categoryid" @bind-Value="Listing.CategoryId" class="form-control" />
                    <ValidationMessage For="() => Listing.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="desc" class="form-label">Desc:</label>
                    <InputText id="desc" @bind-Value="Listing.Desc" class="form-control" />
                    <ValidationMessage For="() => Listing.Desc" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Listing.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Listing.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Listing.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Listing.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Listing.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Listing.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Listing.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Listing.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/listings">Back to List</a>
</div>

@code {
    private string userId = "System";

    @inject AuthenticationStateProvider authenticationStateProvider

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Listing? Listing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        using var context = DbFactory.CreateDbContext();
        Listing ??= await context.Listing.FirstOrDefaultAsync(m => m.Id == Id);

        if (Listing is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateListing()
    {
        if (Listing != null)
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(Listing!).State = EntityState.Modified;

            Listing.UpdatedBy = userId;
            Listing.DateUpdated = DateTime.Now;

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ListingExists(Listing!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }

            NavigationManager.NavigateTo("/listings");
        }
    }

    private bool ListingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Listing.Any(e => e.Id == id);
    }
}
