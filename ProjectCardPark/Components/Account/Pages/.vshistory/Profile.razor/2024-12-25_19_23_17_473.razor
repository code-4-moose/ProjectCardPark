@page "/Account/Profile"

@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.EntityFrameworkCore;
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProjectCardPark.Data

@inject SignInManager<ProjectCardParkUser> SignInManager
@inject UserManager<ProjectCardParkUser> UserManager
@inject IUserStore<ProjectCardParkUser> UserStore
@inject IEmailSender<ProjectCardParkUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject UserManager<ProjectCardParkUser> UserManager
@inject IEmailSender<ProjectCardParkUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager



<body>
    <div class="container_1">
        <div class="profile_pic"></div>
        <h1 class="username">Amos Tan</h1>
        <p class="user_desc">This user loves mooses</p>
        <div class="user_joined_date">Joined 5y 2m ago</div>
        <div class="user-rating">
            <h3>5.0</h3>
            <i class="fa-solid fa-star star_css" style="font-size: 1.2em;"></i>
        </div>
    </div>
    <hr/>
    <div class="container_2">
        <h4>Current Listings</h4>
        <div class="listings">

        </div>
    </div>
</body>

@code {
    private string? message;
    private ProjectCardParkUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    public class IndexModel : PageModel
    {
        private readonly AddIdentityCore _context;

        public IndexModel(AddIdentityCore context)
        {
            _context = context;
        }

        public List<Product> Products { get; set; }

        public async Task OnGetAsync()
        {
            // Retrieve data from the database
            Products = await _context.Products.ToListAsync();
        }
    }

}
